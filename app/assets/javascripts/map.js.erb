// Leaflet extensions
L.extend(L.LatLngBounds.prototype, {
  getSouthLat: function () {
    return this._southWest.lat;
  },

  getWestLng: function () {
    return this._southWest.lng;
  },

  getNorthLat: function () {
    return this._northEast.lat;
  },

  getEastLng: function () {
    return this._northEast.lng;
  },

  toBBOX: function () {
    var decimal = 6;
    var mult = Math.pow(10, decimal);
    var xmin = Math.round(this.getWestLng() * mult) / mult;
    var ymin = Math.round(this.getSouthLat() * mult) / mult;
    var xmax = Math.round(this.getEastLng() * mult) / mult;
    var ymax = Math.round(this.getNorthLat() * mult) / mult;
    return xmin + "," + ymin + "," + xmax + "," + ymax;
  },

  getSize: function () {
    return (this._northEast.lat - this._southWest.lat) *
           (this._northEast.lng - this._southWest.lng);
  },

  wrap: function () {
    return new L.LatLngBounds(this._southWest.wrap(), this._northEast.wrap());
  }
});

L.extend(L.Bounds.prototype, {
  getWidth: function () {
   return this.max.x - this.min.x;
  },

  getHeight: function () {
   return this.max.y - this.min.y;
  }
});

L.Icon.Default.imagePath = <%= "#{asset_prefix}/images".to_json %>;

var objectLayer;
var objectLoader;

function getUserIcon(url) {
  return L.icon({
    iconUrl: url || <%= asset_path('marker-red.png').to_json %>,
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowUrl: <%= asset_path('images/marker-shadow.png').to_json %>,
    shadowSize: [41, 41]
  });
}

function addObjectToMap(object, zoom, map, callback) {
  if (objectLoader) objectLoader.abort();
  if (objectLayer) map.removeLayer(objectLayer);

  objectLoader = $.ajax({
    url: OSM.apiUrl(object),
    dataType: "xml",
    success: function (xml) {
      objectLayer = new L.OSM.DataLayer(null, {
        style: {
          strokeColor: "blue",
          strokeWidth: 3,
          strokeOpacity: 0.5,
          fillOpacity: 0.2,
          fillColor: "lightblue",
          pointRadius: 6
        }
      });

      objectLayer.interestingNode = function (node, ways, relations) {
        if (object.type === "node") {
          return true;
        } else if (object.type === "relation") {
          for (var i = 0; i < relations.length; i++)
            if (relations[i].members.indexOf(node) != -1)
              return true;
        } else {
          return false;
        }
      };

      objectLayer.addData(xml);

      if (zoom) map.fitBounds(objectLayer.getBounds());
      if (callback) callback(objectLayer.getBounds());

      objectLayer.addTo(map);
    }
  });
}
